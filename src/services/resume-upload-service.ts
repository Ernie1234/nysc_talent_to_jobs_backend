// services/resume-upload-service.ts
import path from 'path';
import { Types } from 'mongoose';
import { Express } from 'express';
import { NotFoundException, BadRequestException } from '@/utils/app-error';
import { validateResumeFile } from '@/validations/resume-upload-validation';
import { ResumeUploadModel } from '@/models/resume-upload-model';

export interface ResumeUploadData {
  userId: Types.ObjectId;
  originalName: string;
  fileName: string;
  filePath: string;
  fileSize: number;
  fileType: string;
  mimeType: string;
}

export const createResumeUploadService = async (
  file: Express.Multer.File,
  userId: Types.ObjectId
) => {
  // Validate the file using our Zod-inspired validation
  try {
    validateResumeFile(file);
  } catch (error) {
    throw new BadRequestException(error instanceof Error ? error.message : 'Invalid file');
  }

  // File is already saved to disk by multer, so we just need to create the database record
  const resumeUpload = await ResumeUploadModel.create({
    userId,
    originalName: file.originalname,
    fileName: file.filename, // This is the unique filename generated by multer
    filePath: file.path, // This is the full path where multer saved the file
    fileSize: file.size,
    fileType: path.extname(file.originalname).replace('.', ''),
    mimeType: file.mimetype,
    status: 'completed',
  });

  return resumeUpload;
};

export const getUserResumesService = async (userId: string) => {
  const resumes = await ResumeUploadModel.find({ userId })
    .sort({ createdAt: -1 })
    .select('-filePath'); // Don't expose the file path for security

  return resumes;
};

export const getResumeByIdService = async (resumeId: string, userId: string) => {
  const resume = await ResumeUploadModel.findOne({
    _id: resumeId,
    userId,
  });

  if (!resume) {
    throw new NotFoundException('Resume not found');
  }

  return resume;
};

export const deleteResumeService = async (resumeId: string, userId: string) => {
  const resume = await ResumeUploadModel.findOne({
    _id: resumeId,
    userId,
  });

  if (!resume) {
    throw new NotFoundException('Resume not found');
  }

  // Delete the physical file first
  const { unlink } = await import('fs/promises');
  try {
    await unlink(resume.filePath);
  } catch (error) {
    console.error('Error deleting file from filesystem:', error);
    // Continue with database deletion even if file deletion fails
  }

  // Then delete from database
  await ResumeUploadModel.findByIdAndDelete(resumeId);

  return resume;
};
